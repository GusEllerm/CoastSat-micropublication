```{python exec}
# This code makes the micropublication aware of its interface data.
from dataclasses import dataclass
from typing import Optional
from pathlib import Path
import pandas as pd
import json

import os

# Load the transect data
data_path = os.path.join(Path.cwd(), "data.json")
df = pd.read_json(data_path, typ='series')
@dataclass
class SiteData:
  id: str
  site_id: str
  orientation: float
  along_dist: float
  along_dist_norm: float
  beach_slope: float
  cil: float
  ciu: float
  trend: float
  n_points: float
  n_points_nonan: float
  r2_score: float
  mae: float
  mse: float
  rmse: float
  intercept: float
  ERODIBILITY: Optional[float]

site_data = SiteData(**df.to_dict())

# Load the publication.crate RO-Crate metadata
crate_metadata_path = Path.cwd() / "interface.crate" / "ro-crate-metadata.json"
if crate_metadata_path.exists():
    with open(crate_metadata_path, "r", encoding="utf-8") as f:
        crate_metadata = json.load(f)
else:
    crate_metadata = {}

# Get the result file entity based on the formal parameter
formal_param = "#fp-transects_extended_geojson"

def match_example_of_work(entity, formal_param):
    eow = entity.get("exampleOfWork")
    if isinstance(eow, list):
        return any(isinstance(ref, dict) and ref.get("@id") == formal_param for ref in eow)
    elif isinstance(eow, dict):
        return eow.get("@id") == formal_param
    elif isinstance(eow, str):
        return eow == formal_param
    return False

result_file = next(
    (e for e in crate_metadata.get("@graph", []) if match_example_of_work(e, formal_param)),
    None
)

if "nzd" in site_data.id or "sar" in site_data.id:
    is_nz_sar = True
else:
    is_nz_sar = False

```

**`site_data.id`{python exec}**

- `site_data.id`{python exec} is the unique identifier for the site.
- `site_data.site_id`{python exec} is the identifier for the site in the context of the micropublication.
- `site_data.orientation`{python exec} is the orientation of the site in degrees.
- `site_data.along_dist`{python exec} is the alongshore distance from a reference point.
- `site_data.along_dist_norm`{python exec} is the normalized alongshore distance.
- `site_data.beach_slope`{python exec} is the slope of the beach.
- `site_data.cil`{python exec} is the lower confidence interval for the trend.
- `site_data.ciu`{python exec} is the upper confidence interval for the trend.
- `site_data.trend`{python exec} is the trend value for the site.
- `site_data.n_points`{python exec} is the total number of points used in the analysis.
- `site_data.n_points_nonan`{python exec} is the number of points used in the analysis that

**Results Production**

This transect data can be found `dict(type="Link", target=f"{result_file["@id"]}", content=[dict(type="Text", value=f"here")])`{python exec}.

::: if "nzd" in site_data.id or "sar" in site_data.id

The results shown for this transect are based on pre processed data form coastSat. 

::: else

The results shown for this transect are based on an external dataset -- PacificRim Data. 

:::

