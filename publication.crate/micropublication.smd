```{python exec}
# This code makes the micropublication aware of its interface data.
from dataclasses import dataclass
from typing import Optional
from pathlib import Path

import pandas as pd
import numpy as np
import requests
import json
import os

# Load the transect data
data_path = os.path.join(Path.cwd(), "data.json")
df = pd.read_json(data_path, typ='series')

def round_if_number(val):
    if isinstance(val, (float, int)):
        return round(val, 2)
    return val

@dataclass
class SiteData:
    id: str
    site_id: str
    orientation: float
    along_dist: float
    along_dist_norm: float
    beach_slope: float
    cil: float
    ciu: float
    trend: float
    n_points: float
    n_points_nonan: float
    r2_score: float
    mae: float
    mse: float
    rmse: float
    intercept: float
    ERODIBILITY: Optional[float]

site_data = SiteData(**{k: round_if_number(v) for k, v in df.to_dict().items()})

# Configuration Variables
min_points_for_valid_regression = 10 # Minimum number of non-NaN points for the linear regression to be considered plausible
trend_threshold = 0.01 # Threshold for trend value to be considered significant -- i.e. is the slope big enough to care about. 
noise_threshold = round(2 * abs(site_data.trend) * np.sqrt(site_data.n_points_nonan), 3) # Even if the trend is big enough, is the signal drowned by noise?
weak_trend_threshold = 0.05 # Trends less than this are considered weak
strong_trend_threshold = 0.2 # Trends greater than this are considered strong

show_trend = False # We only show the trend if it is interpreted as valid 

# Load the coordinate data 
coordinates_path = os.path.join(Path.cwd(), "coordinates.json")
lon, lat = pd.read_json(coordinates_path, typ='series').to_dict()['coordinates'][0]
# Reverse geocode coords to get location name
location = requests.get(
    url="https://nominatim.openstreetmap.org/reverse",
    params={
        'lat': lat,
        'lon': lon,
        'format': 'json',
        'zoom': 10,
        'addressdetails': 1
    },
    headers={'User-Agent': 'CoastSat-Micropublication'}
).json().get('display_name')

# Load the publication.crate RO-Crate metadata
crate_metadata_path = Path.cwd() / "interface.crate" / "ro-crate-metadata.json"
if crate_metadata_path.exists():
    with open(crate_metadata_path, "r", encoding="utf-8") as f:
        crate_metadata = json.load(f)
else:
    crate_metadata = {}

# Get the result file entity based on the formal parameter
formal_param = "#fp-transects_extended_geojson"

def match_example_of_work(entity, formal_param):
    eow = entity.get("exampleOfWork")
    if isinstance(eow, list):
        return any(isinstance(ref, dict) and ref.get("@id") == formal_param for ref in eow)
    elif isinstance(eow, dict):
        return eow.get("@id") == formal_param
    elif isinstance(eow, str):
        return eow == formal_param
    return False

result_file = next(
    (e for e in crate_metadata.get("@graph", []) if match_example_of_work(e, formal_param)),
    None
)

if "nzd" in site_data.id or "sar" in site_data.id:
    is_nz_sar = True
else:
    is_nz_sar = False

```
# `location`{python exec}

::: if site_data.n_points_nonan < min_points_for_valid_regression

The trend fit is not valid due to insufficient data points. The number of non-NaN points used in the analysis is `site_data.n_points_nonan`{python exec}, which is below the minimum required of {min_points_for_valid_regression}.

::: elif site_data.r2_score < 0

The regression line fits worse than a flat model; this is likely due to a lack of data or a poor fit to the data. The R² score is `site_data.r2_score`{python exec}, which indicates that the model does not explain the variability in the data well.

::: elif (abs(site_data.trend) < trend_threshold) or (site_data.r2_score < 0.3) or (site_data.rmse > noise_threshold)

The regression reveals either a negligible trend, a weak correlation, or excessive prediction error — suggesting that any apparent trend is unreliable or obscured by noise.

```{python exec}
show_trend = True
```

::: elif site_data.r2_score < 0.8 

The trend fit is valid with a high R² score of `site_data.r2_score`{python exec}. This indicates that the linear regression model explains a large portion of the variability in the data, suggesting a strong trend.

```{python exec}
show_trend = True
```

::: else

The trend fit is valid with an excellent R² score of `site_data.r2_score`{python exec}. This indicates that the linear regression model explains almost all the variability in the data, suggesting a very strong trend.

```{python exec}
show_trend = True
```

:::

::: if show_trend

:::: if abs(site_data.trend) < weak_trend_threshold

::::: if site_data.trend < 0 

The coast is eroding very slightly, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered negligible.

::::: else

The coast is accreting very slightly, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered negligible.

:::::

:::: elif abs(site_data.trend) < strong_trend_threshold

::::: if site_data.trend < 0

The coast is eroding, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered weak.

::::: else

The coast is accreting, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered weak.

:::::

:::: else

::::: if site_data.trend < 0

The coast is eroding significantly, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered strong.

::::: else

The coast is accreting significantly, with a trend of **`site_data.trend`{python exec}** m/year. This trend is considered strong.

:::::

::::

:::

- `site_data.orientation`{python exec} is the orientation of the site in degrees.
- `site_data.along_dist`{python exec} is the alongshore distance from a reference point.
- `site_data.along_dist_norm`{python exec} is the normalized alongshore distance.
- `site_data.beach_slope`{python exec} is the slope of the beach.
- `site_data.cil`{python exec} is the lower confidence interval for the trend.
- `site_data.ciu`{python exec} is the upper confidence interval for the trend.
- `site_data.trend`{python exec} is the trend value for the site.
- `site_data.n_points`{python exec} is the total number of points used in the analysis.
- `site_data.n_points_nonan`{python exec} is the number of points used in the analysis that

## Theshold Values 

|        | Threshold         | Actual Value         |
---------|-------------------|---------------------|
| Trend | < `trend_threshold`{python exec}   | `site_data.trend`{python exec} |
| R^2 Score | < 0.3 | `site_data.r2_score`{python exec} |
| Noise | > `noise_threshold`{python exec}   | `site_data.rmse`{python exec} |

## Provenance

This transect data can be found `dict(type="Link", target=f"{result_file["@id"]}", content=[dict(type="Text", value=f"here")])`{python exec}.

::: if "nzd" in site_data.id or "sar" in site_data.id

```{python exec}
# Get provenance information for NZD/SAR datasets

```

The results shown for this transect are based on pre processed data form coastSat. 

::: else

```{python exec}
# Get provenance information for PacificRim Dataset
```

The results shown for this transect are based on an external dataset -- PacificRim Data. 

:::

`lon`{python exec} and `lat`{python exec} are the coordinates of the site.

